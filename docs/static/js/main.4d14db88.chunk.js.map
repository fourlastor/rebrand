{"version":3,"sources":["audio.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","stage","audioRef","React","createRef","audio","this","current","setTimeout","setState","play","className","type","placeholder","value","name","onChange","e","updateName","target","onClick","oldBrand","newBrand","form","pickDisplay","ref","id","src","preload","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,mC,sNC6E5BC,E,YAvEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,SAGT,EAAKC,SAAWC,IAAMC,YANL,E,oEASX,IAAD,OACCC,EAAQC,KAAKJ,SAASK,QAC5BC,YAAW,kBAAM,EAAKC,SAAS,CAACR,MAAO,eAAc,MACrDI,EAAMK,OACNJ,KAAKG,SAAS,CAAER,MAAO,e,6BAGjB,IAAD,OACL,OACE,yBAAKU,UAAU,OACb,2BAAOC,KAAK,OAAOD,UAAU,gBAAgBE,YAAY,sBAAsBC,MAAOR,KAAKN,MAAMe,KAAMC,SAAU,SAACC,GAAD,OAAO,EAAKC,WAAWD,EAAEE,OAAOL,UACjJ,4BAAQF,KAAK,SAASD,UAAU,gBAAgBS,QAAS,kBAAM,EAAKV,SAApE,c,iCAMJ,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YAAYL,KAAKN,MAAMe,S,iCAM1C,OACE,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,WAAWL,KAAKN,MAAMe,S,iCAKhCA,GACTT,KAAKG,SAAS,CAACM,KAAMA,M,oCAIrB,OAAQT,KAAKN,MAAMC,OACjB,IAAK,WACH,OAAOK,KAAKe,WACd,IAAK,WACH,OAAOf,KAAKgB,WACd,IAAK,QACL,QACE,OAAOhB,KAAKiB,U,+BAKhB,OACE,6BACGjB,KAAKkB,cACN,2BACEC,IAAKnB,KAAKJ,SACVwB,GAAG,QACHC,IAAKtB,IACLuB,QAAQ,c,GAnEAzB,IAAM0B,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d14db88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/audio.07ee9d43.mp3\";","import React from 'react';\nimport './App.css';\nimport audio from './audio.mp3';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      stage: 'input'\n    }\n\n    this.audioRef = React.createRef();\n  }\n\n  play() {\n    const audio = this.audioRef.current\n    setTimeout(() => this.setState({stage: 'newbrand'}), 8144);\n    audio.play()\n    this.setState({ stage: 'oldbrand' })\n  }\n\n  form() {\n    return (\n      <div className=\"App\">\n        <input type=\"text\" className=\"rebrand-input\" placeholder=\"Insert your name...\" value={this.state.name} onChange={(e) => this.updateName(e.target.value)}/>\n        <button type=\"submit\" className=\"rebrand-input\" onClick={() => this.play()}>Rebrand</button>\n      </div>\n    );\n  }\n\n  oldBrand() {\n    return (\n      <div className=\"App\">\n        <div className=\"oldbrand\">{this.state.name}</div>\n      </div>\n    );\n  }\n\n  newBrand() {\n    return (\n      <div className=\"App\">\n        <div className=\"rebrand\">{this.state.name}</div>\n      </div>\n    );\n  }\n\n  updateName(name) {\n    this.setState({name: name})\n  }\n\n  pickDisplay() {\n    switch (this.state.stage) {\n      case 'oldbrand':\n        return this.oldBrand();\n      case 'newbrand':\n        return this.newBrand();\n      case 'input':\n      default:\n        return this.form();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.pickDisplay()}\n        <audio\n          ref={this.audioRef}\n          id=\"audio\"\n          src={audio}\n          preload=\"auto\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}